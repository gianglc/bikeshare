# Modules and Tools that we will be using

After deciding that we would be using git and GitHub for repository management and Ipython notebooks for analysis, we had to make some decisions on what Python modules we would. Here is what we decided to use and the logic behind that:

## Website 

* __Hugo__: Hugo was my first choice for making the website. It allowed for various ways to add markdown files and make a blogging website out of that. It supported Markdown tables and other markdown feature but one of the drawbacks I initially found was embedding IPython notesbooks into Hugo. I coulddn't find something like `nbviewer`. Later I realized that were other extensions that supported the use of Jupyter Notebooks but I had already delved deep into the world of Sphinx. 
* __Sphinx__: Sphinx is mostly used for documenting Python projects so I initially looked for other modules that could generate websties, but I couldn't find a better alternative that could embed Jupyter notebooks which I wanted to be a part of the website. Using Sphinx, I had to learn `reStructured` text. The benefit of using Sphinx is that is it already a well establised tool so there is a lot of support and extensions for it on the interewbs. I later added a markdown extension an a bootstrap theme extension. 
* __Bootstrap__: I used the `bootstrap` Sphinx theme and added my own `css` code to customize the website experiece. 

## Geographical Vizualizations

* __Folium__: Giang discovered folium and it was a great extension to use to generate creative and stylistic geographical plots quickly. 
* __Leaftet.js__: I attempted to use Leaflet and generated some geographical plots but having geographical plots in both Leaflet and Folium did not add any value to the website so we just stuck with Folium. 

## Charts, Plots, Histograms 

* __Matplotlib__: Matplotlib was the default library we used to generate plots. It allowed for customizability, and convenience due to its relizbility and support. 
* __Seaborn__: For some plots that were easier to generate in Seaborn like stacked plots, we used the Seaborn library. We did not get the chance to get in depth with Seaborn but it is something I would love to have more time with! 

## Interactive Plots

* __Matplotlib__: We used matplotlib again for interactive plotting
* __mpld3__: Library that works in accordance with MatplotLib that allows for interaction with the plots
* __Bokeh__: I tried learning this but ultimately stuck with `mpld3`